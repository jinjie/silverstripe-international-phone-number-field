{"version":3,"sources":["intlTelInput.js"],"names":["factory","intlTelInput","window","document","undefined","allCountries","i","length","c","name","iso2","dialCode","priority","areaCodes","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","intlTelInputGlobals","instances","id","defaults","allowDropdown","autoHideDialCode","autoPlaceholder","customPlaceholder","dropdownContainer","excludeCountries","formatOnDisplay","geoIpLookup","hiddenInput","initialCountry","localizedCountries","nationalMode","onlyCountries","placeholderNumberType","preferredCountries","separateDialCode","utilsScript","regionlessNanpNumbers","addEventListener","windowLoaded","forEachProp","obj","callback","keys","forEachInstance","method","Iti","input","options","_this","this","instance","Constructor","TypeError","_classCallCheck","telInput","activeItem","highlightedItem","customOptions","value","hasOwnProperty","hadInitialPlaceholder","Boolean","getAttribute","protoProps","staticProps","prototype","_createClass","_this2","isMobile","test","navigator","userAgent","body","classList","add","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","countries","sort","_countryNameSort","countryCodes","index","lowerCaseOnlyCountries","map","country","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","localeCompare","_addCountryCode","j","countryCode","countryData","_getCountryData","push","attrs","container","el","createElement","setAttribute","appendChild","parentClass","wrapper","_createEl","class","parentNode","insertBefore","flagsContainer","selectedFlag","role","aria-owns","selectedFlagInner","selectedDialCode","dropdownArrow","countryList","aria-expanded","_appendListItems","aria-disabled","dropdown","hiddenInputName","lastIndexOf","concat","substr","type","className","tmp","insertAdjacentHTML","val","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options","_updateFlagFromNumber","_setFlag","defaultCountry","_updateValFromNumber","_initKeyListeners","_initFocusListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","getNumber","form","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_getClosestLabel","_handleClickSelectedFlag","disabled","readOnly","_showDropdown","_handleFlagsContainerKeydown","isDropdownHidden","stopPropagation","_closeDropdown","_this5","intlTelInputUtils","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","number","max","_this7","_handleMousedownFocusEvent","activeElement","_handleKeypressPlusEvent","_handleFocusEvent","len","setSelectionRange","_handleSubmitOrBlurEvent","_removeEmptyDialCode","startsPlus","charAt","numeric","_getNumeric","removeEventListener","s","replace","createEvent","initEvent","dispatchEvent","remove","_setDropdownPosition","_highlightListItem","_scrollTo","_bindDropdownListeners","_trigger","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","_toggleClass","extraTop","style","left","scrollLeft","_handleWindowScroll","_this9","_handleMouseoverCountryList","listItem","_getClosestListItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","next","previousElementSibling","nextElementSibling","_startsWith","querySelector","originalNumber","useNational","_intlTelInputUtils$nu","numberFormat","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","isNanp","alreadySelected","isNanpAreaCode","isRegionlessNanpNumber","areaCode","prevItem","ignoreOnlyCountriesOption","allowFail","Error","prevCountry","title","parent","innerHTML","_updatePlaceholder","nextItem","shouldSetPlaceholder","numberType","placeholder","getExampleNumber","flagChanged","_updateDialCode","removeChild","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","hasSelectedListItem","newNumber","inputVal","newDialCode","prevDialCode","numericChars","isNaN","parseInt","trim","numericVal","normalizedVal","start","_cap","setCountry","getExtension","_getFullNumber","getNumberType","getValidationError","isValidNumber","originalCountryCode","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","iti","_init","module","exports"],"mappings":"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","file":"intl-phone-number-library.js","sourcesContent":["/*\n * International Telephone Input v14.0.6\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    var intlTelInput = factory(window, document);\n    if (typeof module === \"object\" && module.exports) module.exports = intlTelInput; else window.intlTelInput = intlTelInput;\n})(function(window, document, undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1684\" ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1264\" ], [ \"Antigua and Barbuda\", \"ag\", \"1268\" ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1242\" ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1246\" ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1441\" ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1284\" ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1 ], [ \"Cayman Islands\", \"ky\", \"1345\" ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2 ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1 ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1767\" ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1473\" ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1671\" ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1 ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2 ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3 ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1 ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1 ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1664\" ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1670\" ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1869\" ], [ \"Saint Lucia\", \"lc\", \"1758\" ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1784\" ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1721\" ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1 ], [ \"Swaziland\", \"sz\", \"268\" ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1868\" ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1649\" ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1340\" ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1 ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1 ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1 ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        window.intlTelInputGlobals = {\n            instances: {}\n        };\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur, and re-add it on focus\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // keep track of if the window.load event has fired as impossible to check after the fact\n        window.addEventListener(\"load\", function() {\n            // UPDATE: use a public static field so we can fudge it in the tests\n            window.intlTelInputGlobals.windowLoaded = true;\n        });\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, dialCode, priority) {\n                    if (!this.countryCodes.hasOwnProperty(dialCode)) {\n                        this.countryCodes[dialCode] = [];\n                    }\n                    var index = priority || 0;\n                    this.countryCodes[dialCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodes = {};\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                        // area codes\n                        if (c.areaCodes) {\n                            for (var j = 0; j < c.areaCodes.length; j++) {\n                                // full dial code is country code + dial code\n                                this._addCountryCode(c.iso2, c.dialCode + c.areaCodes[j]);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    // containers (mostly for positioning)\n                    var parentClass = \"intl-tel-input\";\n                    if (this.options.allowDropdown) parentClass += \" allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" separate-dial-code\";\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"selected-flag\",\n                        role: \"combobox\",\n                        \"aria-owns\": \"country-listbox\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti-flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti-arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"country-list hide\",\n                            id: \"country-listbox\",\n                            \"aria-expanded\": \"false\",\n                            role: \"listbox\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"preferred\");\n                            this._createEl(\"li\", {\n                                \"class\": \"divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"intl-tel-input iti-container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        // open the list item\n                        tmp += \"<li class='country \".concat(className, \"' id='iti-item-\").concat(c.iso2, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"'>\");\n                        // add the flag\n                        tmp += \"<div class='flag-box'><div class='iti-flag \".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    var val = this.telInput.value;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initFocusListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"ArrowDown\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.windowLoaded) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initFocusListeners\",\n                value: function _initFocusListeners() {\n                    var _this7 = this;\n                    // mousedown decides where the cursor goes, so if we're focusing we must preventDefault as\n                    // we'll be inserting the dial code, and we want the cursor to be at the end no matter where\n                    // they click\n                    this._handleMousedownFocusEvent = function(e) {\n                        if (_this7.telInput !== document.activeElement && !_this7.telInput.value) {\n                            e.preventDefault();\n                            // but this also cancels the focus, so we must trigger that manually\n                            _this7.telInput.focus();\n                        }\n                    };\n                    this.telInput.addEventListener(\"mousedown\", this._handleMousedownFocusEvent);\n                    this._handleKeypressPlusEvent = function(e) {\n                        if (e.key === \"+\") _this7.telInput.value = \"\";\n                    };\n                    // on focus: if empty, insert the dial code for the currently selected flag\n                    this._handleFocusEvent = function() {\n                        if (!_this7.telInput.value && !_this7.telInput.readOnly && _this7.selectedCountryData.dialCode) {\n                            // insert the dial code\n                            _this7.telInput.value = \"+\".concat(_this7.selectedCountryData.dialCode);\n                            // after auto-inserting a dial code, if the first key they hit is '+' then assume they are\n                            // entering a new number, so remove the dial code. use keypress instead of keydown because\n                            // keydown gets triggered for the shift key (required to hit the + key), and instead of\n                            // keyup because that shows the new '+' before removing the old one\n                            _this7.telInput.addEventListener(\"keypress\", _this7._handleKeypressPlusEvent);\n                            // after tabbing in, make sure the cursor is at the end we must use setTimeout to get\n                            // outside of the focus handler as it seems the selection happens after that\n                            setTimeout(function() {\n                                var len = _this7.telInput.value.length;\n                                _this7.telInput.setSelectionRange(len, len);\n                            });\n                        }\n                    };\n                    this.telInput.addEventListener(\"focus\", this._handleFocusEvent);\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    var startsPlus = this.telInput.value.charAt(0) === \"+\";\n                    if (startsPlus) {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                    // remove the keypress listener we added on focus\n                    this.telInput.removeEventListener(\"keypress\", this._handleKeypressPlusEvent);\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"hide\");\n                    this.countryList.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem);\n                        this._scrollTo(this.activeItem);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿ ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"divider\")) {\n                            next = key === \"ArrowUp\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next);\n                        this._scrollTo(next);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-item-\".concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var isNanp = this.selectedCountryData.dialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        // check if one of the matching countries is already selected\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1;\n                        // check if the given number contains a NANP area code i.e. the only dialCode that could be\n                        // extracted was +1 (instead of say +1204) and the actual number's length is >=4\n                        var isNanpAreaCode = dialCode === \"+1\" && numeric.length >= 4;\n                        var isRegionlessNanpNumber = this.selectedCountryData.dialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) either a matching country is not already selected OR the number contains a NANP area\n                        // code (ensure the flag is set to the first matching country)\n                        if (!isRegionlessNanpNumber && (!alreadySelected || isNanpAreaCode)) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"highlight\");\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti-flag \".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        var parent = this.telInput.parentNode;\n                        if (prevCountry.dialCode) {\n                            parent.classList.remove(\"iti-sdc-\".concat(prevCountry.dialCode.length + 1));\n                        }\n                        if (dialCode) {\n                            parent.classList.add(\"iti-sdc-\".concat(dialCode.length));\n                        }\n                        this.selectedDialCode.innerHTML = dialCode;\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            var nextItem = this.countryList.querySelector(\"#iti-item-\".concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"active\");\n                            this.activeItem = nextItem;\n                            this.countryList.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"hide\");\n                    this.countryList.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (this.countryCodes[numericChars]) {\n                                    // store the actual raw string (useful for matching later)\n                                    dialCode = number.substr(0, i + 1);\n                                }\n                                // longest dial code is 4 chars\n                                if (numericChars.length === 4) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    // normalized means ensure starts with a 1, so we can match against the full dial code\n                    var normalizedVal = numericVal.charAt(0) === \"1\" ? numericVal : \"1\".concat(numericVal);\n                    if (this.options.separateDialCode) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else if (val && val.charAt(0) !== \"+\" && val.charAt(0) !== \"1\" && dialCode && dialCode.charAt(0) === \"1\" && dialCode.length === 4 && dialCode !== normalizedVal.substr(0, 4)) {\n                        // ensure national NANP numbers contain the area code\n                        prefix = dialCode.substr(1);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        if (dialCode) {\n                            // US dialCode is \"+1\", which is what we want\n                            // CA dialCode is \"+1 123\", which is wrong - should be \"+1\" (as it has multiple area codes)\n                            // AS dialCode is \"+1 684\", which is what we want (as it doesn't have area codes)\n                            // Solution: if the country has area codes, then revert to just the dial code\n                            if (this.selectedCountryData.areaCodes !== null) {\n                                dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            }\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        this.telInput.removeEventListener(\"mousedown\", this._handleMousedownFocusEvent);\n                        this.telInput.removeEventListener(\"focus\", this._handleFocusEvent);\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind all events: key events, and focus/blur events if autoHideDialCode=true\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(countryCode)) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        window.intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        window.intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        window.intlTelInputGlobals.defaults = defaults;\n        // version\n        window.intlTelInputGlobals.version = \"14.0.6\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});"]}